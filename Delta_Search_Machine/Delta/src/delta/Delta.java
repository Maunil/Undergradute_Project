/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package delta;

import static delta.Delta.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Scanner;
import java.util.concurrent.ThreadLocalRandom;
import java.io.*;

import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Shreyash
 */
public class Delta extends javax.swing.JFrame
{
    public static int FilesCount;
//    public static String[] getlinks;
    public static Stack_methods toCorrection = null;
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    
    
    Vector<String> Str_obj = new Stack<String>();
    JTextField jTextField2;
    /**
     * Creates new form Delta
     */
    static int picNo=1;
    
    static Color[] colors = new Color[14];
    
    public static void setColor()
    {
        colors[0] = Color.white;
        colors[1] = Color.red;
        colors[2] = Color.yellow;
        colors[3] = Color.orange;
        colors[4] = Color.white;
        colors[5] = Color.orange;
        colors[6] = Color.pink;
        colors[7] = Color.magenta;
        colors[8] = Color.cyan;
        colors[9] = Color.white;
        colors[10] = Color.lightGray;
        colors[11] = Color.cyan;
        colors[12] = Color.red;
        colors[13] = Color.yellow;
    }
    
    public Delta()
    {
               
        JFrame frame = new JFrame();                            //makes a window
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  //closing operation
        frame.setResizable(false);
        frame.setTitle("Delta Search Machine");
        jTextField2 = new javax.swing.JTextField(); 
        getContentPane().add(jTextField2);
        jTextField2.setBounds(130, 50, 960, 40);
     
        
        AutoSuggestor autoSuggestor = new AutoSuggestor(jTextField2, frame, null, 0.75f) {    //calls class autosuggestor's constructor 
            @Override
            boolean wordTyped(String typedWord) {

                ArrayList<String> words = new ArrayList<>();
                
                for(int i=0;i<36;i++)
                {
                    Priorityqueue P = null;
                    P = ReadRecommedationFile(i);
                    if(P!=null)
                    {
                        String[] stri = new String[P.GetCounter()-1];
                        
                        String temp;int k=0;
                        while((temp=P.Dequeue())!="-1")
                        {
                            stri[k]=temp;
                            k++;
                        }
                        
                        
                        for(int j=0;j<k;j++)
                        {
                            words.add(stri[j]);
                        }                        
                    }
                }

                setDictionary(words);

                return super.wordTyped(typedWord);//now call super to check for any matches against newest dictionary
            }
        };      
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jLayeredPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 1366, 729));
        setMinimumSize(new java.awt.Dimension(1366, 729));
        getContentPane().setLayout(null);

        jButton3.setText("Index");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(930, 610, 160, 40);
        jButton3.setBackground(colors[picNo]);

        jButton2.setText("History");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(750, 610, 160, 40);
        jButton2.setBackground(colors[picNo]);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(840, 100, 290, 30);
        
        getContentPane().add(jLabel3);
        jLabel3.setBounds(840, 100, 290, 30);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1);
        jTextField1.setBounds(130, 50, 960, 40);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(1110, 50, 160, 40);
        jButton1.setBackground(colors[picNo]);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/"+picNo+".jpg"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(1366, 729));
        jLabel1.setMinimumSize(new java.awt.Dimension(1366, 729));
        jLabel1.setPreferredSize(new java.awt.Dimension(1366, 729));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-10, 0, 1366, 729);
        
        jLabel3.setForeground(Color.orange);

        pack();
    }// </editor-fold>                        
    
    public boolean Check(String str)
    {
        boolean d = true;
        File f = new File("Delta_Database/Search/"+str+".txt");
        File f1 = new File("Delta_Database/Spell/"+str+".txt");
        if(!f.exists() && !f1.exists())
        {
            d=false;
        }
        return d;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)
    {                                        
        boolean k;
        boolean l;
        int cntr=0;
        String read = null;
        String query=Lowercase(jTextField2.getText());
        
        try
        {
            long startTime = System.currentTimeMillis();
            
            if(Check(query))
            {
                File f = new File("Delta_Database/Search/"+query+".txt");
                if(f.exists())
                {
                    read = "Delta_Database/Search/"+query+".txt";                    
                }
                else
                {
                    read = "Delta_Database/Spell/"+query+".txt";
                    k=false;
                }
            }
            else
            {
                k=Search(query,1);
                l=Search(query,2);
                if(k==true || l==true)
                {
                    Add_String_In_Priority(query);
                    read = "Delta_Database/Search/"+query+".txt";
                }
                else
                {
                    read = "Delta_Database/Spell/"+query+".txt";
                    while(toCorrection.getStackSize()!=0)
                    {
                        Spell_Correction(toCorrection.pop(),query,cntr);
                        cntr++;
                    }
                }  
                
                WriteHistoryData(jTextField2.getText());
            }
            
            long totalTime = System.currentTimeMillis() - startTime;
            
            jLabel3.setText("Search Time: " +totalTime+ " mS");
            
        }
        catch(Exception e)
        {
            System.out.print("\nThere is Some error:"+e);
        }
        
        new Testing(read).setVisible(true);
        
        File f2 = new File("Delta_Database/Temp");
        File f3 = new File("Delta_Database/DTemp");
        
        if(f2.exists())
        {
            DeleteF(f2);
        }
        if(f3.exists())
        {
            DeleteF(f3);
        }
    }
    
    public void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        jTextField2.addKeyListener(new KeyAdapter(){
            @Override
            public void keyPressed(KeyEvent evt){
                if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                    jLabel3.setText("You Searched For : " + jTextField2.getText());
                    try {
                        Search(jTextField2.getText(),1);
                        Search(jTextField2.getText(),2);
                    } catch (Exception ex) {
                        Logger.getLogger(Delta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });
    }                                           
              
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        new Testing("Delta_Database/History.txt").setVisible(true);
        
    }                                        

    public void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        
        JFrame Index = new JFrame();    
        Index.setSize(600,200);
        Index.setTitle("Index");
        Index.setResizable(false);
        Index.setVisible(true);
        
        JLabel label = new JLabel();
        label.setSize(300,30);
        label.setLocation(50,30);
        label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/"+picNo+".jpg")));
        
        JTextField Path = new JTextField();
        Path.setSize(300,30);
        
        JLabel newJLabel = new JLabel();
        newJLabel.setSize(300,50);
        newJLabel.setLocation(200,100);
        newJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/"+picNo+".jpg")));
        
        JButton Button = new JButton();
        Button.setText("Index");
        Button.setSize(150,30);
        Button.setLocation(350,30);
        Button.add(newJLabel);
        Button.setBackground(colors[picNo]);
        
        Index.add(label);
        Index.add(newJLabel);
        label.add(Path);
        newJLabel.add(Button);
        
        Button.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                try 
                {
                    File(Path.getText());
                    Indexing();
                } catch (Exception ex) {
                    Logger.getLogger(Delta.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
                
    }                                        
   
	private static String parseIt(String str, int mode)
	{
		String ans = "";
		char ch;
		
		char[] chArray = str.toCharArray();
					
		
		if(mode==1)
		{
			for(int i=0;i<chArray.length;i++)
			{
				if(chArray[i]==(char)92)
				{
					ch='~';
				}
				else if(chArray[i]==':')
				{
					ch='=';
				}
				else
				{
					ch=chArray[i];
				}
				ans = ans + ch;
			}
		}
		else
		{
			for(int i=0;i<chArray.length;i++)
			{
				if(chArray[i]=='~')
				{
					ch=(char)92;
				}
				else if(chArray[i]=='=')
				{
					ch=':';
				}
				else
				{
					ch=chArray[i];
				}
				ans = ans + ch;
			}
		}
		
		return ans;
	}
	
	public static boolean Search(String query, int opt)  throws Exception
	{
            String query1=query;

            query = query+'>';
            
            String add;
            
            if(opt==1)
            {
                add="";
            }
            else
            {
                add="D";
            }
            
            boolean Success;

            toCorrection = new Stack_methods();

            Stack_methods s[] = new Stack_methods[2];

            s[0] = new Stack_methods();
            s[1] = new Stack_methods();

            File f;

            int[] cnt = new int[4];

            String previous=null;

            cnt[0] = 0;
            cnt[1] = 0;
            cnt[2] = 0;
            cnt[3] = 0;

            int stack_size=0;
            int check=0;

            String count;
            String line1;

            Scanner line;



            char[] chArray = query.toCharArray();

            String newstring = "";


            for(int i=0;i<chArray.length;i++)
            {	
                if(Character.isLetter(chArray[i]) || Character.isDigit(chArray[i]))
                {
                        newstring = newstring + chArray[i];
                }
                else if(chArray[i]!=' '&&chArray[i]!='>')
                {
                        s[1].push(newstring);

                        String m1 =""+chArray[i];

                        if(s[1].searchByElement(m1)!=1)
                        {
                                s[1].push(m1);
                        }
                        newstring = "";

                }
                else if(chArray[i]==' '|| chArray[i]=='>')
                {
                        s[1].push(newstring);
                        newstring = "";
                }
            }

            stack_size = s[1].getStackSize();

            count = s[1].pop();

            while(count!=null)
            {	
                    File f0 = new File("Delta_Database/"+add+"Data0/"+count+".txt");
                    File f1 = new File("Delta_Database/"+add+"Data1/"+count+".txt");
                    File f2 = new File("Delta_Database/"+add+"Data2/"+count+".txt");
                    File f3 = new File("Delta_Database/"+add+"Data3/"+count+".txt");

                    //For Debugging
                    //System.out.print("\nFile:"+f0);
                    //System.out.print("\nAdd:"+add);
                    
                    if((!f0.exists())&&(!f1.exists())&&(!f2.exists())&&(!f3.exists()))
                    {
                            toCorrection.push(count);
                            stack_size--;
                    }
                    else
                    {
                        if(f0.exists())
                        {
                                cnt[0]++;
                        }

                        if(f1.exists())
                        {
                                cnt[1]++;
                        }

                        if(f2.exists())
                        {
                                cnt[2]++;
                        }

                        if(f3.exists())
                        {
                                cnt[3]++;
                        }

                        s[0].push(count);
                    }

                    count = s[1].pop();
            }

            if(stack_size!=0)
            {
                for(int i=0;i<4;i++)
                {
                    if(cnt[i]==stack_size)
                    {
                        check++;
                    }
                }

            }

            if(check!=0)
            {
                    count = s[0].pop();
                    int m=0;

                    while(count!=null)
                    {	

                            f = new File("Delta_Database/"+add+"Temp/"+count);

                            if(!f.exists())
                            {
                                    f.mkdirs();
                            }

                            for(int i=0;i<4;i++)
                            {
                                    if(cnt[i]==stack_size)
                                    {
                                            f = new File("Delta_Database/"+add+"Data"+i+"/"+count+".txt");

                                            FileReader File = new FileReader(f);
                                            line = new Scanner(File);

                                            while(line.hasNextLine())
                                            {
                                                    line1 = line.nextLine();

                                                    line1 = parseIt(line1,1);

                                                    if(m==0)
                                                    {
                                                            f = new File("Delta_Database/"+add+"Temp/"+count+"/"+line1+".txt");
                                                            f.createNewFile();
                                                    }
                                                    else
                                                    {
                                                            f = new File("Delta_Database/"+add+"Temp/"+previous+"/"+line1+".txt");

                                                            if(f.exists())
                                                            {
                                                                f = new File("Delta_Database/"+add+"Temp/"+count+"/"+line1+".txt");
                                                                f.createNewFile();
                                                            }
                                                    }
                                            }
                                    }
                            }

                            m++;

                            previous = count;

                            count = s[0].pop();
                    }

                    f = new File("Delta_Database/"+add+"Temp/"+previous);

                    File[] list = f.listFiles();

                    File del =new File("Delta_Database/Search");
                    if(!del.exists()){del.mkdir();}
                    
                    PrintWriter out;
                    
                    try
                    {
                        out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/Search/"+query1+".txt", true)));
                        
                        for(int i=0;i<list.length;i++)
                        {
                            line1 = ""+list[i].getName();
                            line1 = parseIt(line1,2);
                            line1 = line1.substring(0,line1.length()-4);
                            
                            out.print("\n"+line1+"\n"); 
                        }
                        
                        out.close();

                    }
                    catch (Exception e)
                    {
                        System.out.print("\nERROR IN 660:"+ e);
                    }

                    Success=true;			
		}
		else
		{
			Success=false;
			
		}
            		
		return Success;
	}
	
	public static void DeleteF(File f)
	{
	    try
            {
		for (File FileEntry : f.listFiles())
		{
			if (FileEntry.isDirectory()) 
			{
				DeleteF(FileEntry);
				FileEntry.delete();
			} 
			else 
			{
				FileEntry.delete();
			}
		}	
		
		f.delete();
            }
            catch (Exception e)
            {
                System.out.print("\nError in Function DeleteF:"+e);
            }
	}

	public static int GetIndexOFFirstChar(char first)
	{
		int firstindex = -99;
		if(first=='a')
		{firstindex=0;}
		else if(first=='b')
		{firstindex=1;}
		else if(first=='c')
		{firstindex=2;}
		else if(first=='d')
		{firstindex=3;}
		else if(first=='e')
		{firstindex=4;}
		else if(first=='f')
		{firstindex=5;}
		else if(first=='g')
		{firstindex=6;}
		else if(first=='h')
		{firstindex=7;}
		else if(first=='i')
		{firstindex=8;}
		else if(first=='j')
		{firstindex=9;}
		else if(first=='k')
		{firstindex=10;}
		else if(first=='l')
		{firstindex=11;}
		else if(first=='m')
		{firstindex=12;}
		else if(first=='n')
		{firstindex=13;}
		else if(first=='o')
		{firstindex=14;}
		else if(first=='p')
		{firstindex=15;}
		else if(first=='q')
		{firstindex=16;}
		else if(first=='r')
		{firstindex=17;}
		else if(first=='s')
		{firstindex=18;}
		else if(first=='t')
		{firstindex=19;}
		else if(first=='u')
		{firstindex=20;}
		else if(first=='v')
		{firstindex=21;}
		else if(first=='w')
		{firstindex=22;}
		else if(first=='x')
		{firstindex=23;}
		else if(first=='y')
		{firstindex=24;}
		else if(first=='z')
		{firstindex=25;}
		else if(first=='1')
		{firstindex=26;}
		else if(first=='2')
		{firstindex=27;}
		else if(first=='3')
		{firstindex=28;}
		else if(first=='4')
		{firstindex=29;}
		else if(first=='5')
		{firstindex=30;}
		else if(first=='6')
		{firstindex=31;}
		else if(first=='7')
		{firstindex=32;}
		else if(first=='8')
		{firstindex=33;}
		else if(first=='9')
		{firstindex=34;}
		else if(first=='0')
		{firstindex=35;}
                
                
		return firstindex;	
	}


	public static char GetCharOfIndex(int first)
	{
		char firstindex = 99;
                
		if(first==0)
		{firstindex='a';}
		else if(first==1)
		{firstindex='b';}
		else if(first==2)
		{firstindex='c';}
		else if(first==3)
		{firstindex='d';}
		else if(first==4)
		{firstindex='e';}
		else if(first==5)
		{firstindex='f';}
		else if(first==6)
		{firstindex='g';}
		else if(first==7)
		{firstindex='h';}
		else if(first==8)
		{firstindex='i';}
		else if(first==9)
		{firstindex='j';}
		else if(first==10)
		{firstindex='k';}
		else if(first==11)
		{firstindex='l';}
		else if(first==12)
		{firstindex='m';}
		else if(first==13)
		{firstindex='n';}
		else if(first==14)
		{firstindex='o';}
		else if(first==15)
		{firstindex='p';}
		else if(first==16)
		{firstindex='q';}
		else if(first==17)
		{firstindex='r';}
		else if(first==18)
		{firstindex='s';}
		else if(first==19)
		{firstindex='t';}
		else if(first==20)
		{firstindex='u';}
		else if(first==21)
		{firstindex='v';}
		else if(first==22)
		{firstindex='w';}
		else if(first==23)
		{firstindex='x';}
		else if(first==24)
		{firstindex='y';}
		else if(first==25)
		{firstindex='z';}
		else if(first==26)
		{firstindex='1';}
		else if(first==27)
		{firstindex='2';}
		else if(first==28)
		{firstindex='3';}
		else if(first==29)
		{firstindex='4';}
		else if(first==30)
		{firstindex='5';}
		else if(first==31)
		{firstindex='6';}
		else if(first==32)
		{firstindex='7';}
		else if(first==33)
		{firstindex='8';}
		else if(first==34)
		{firstindex='9';}
		else if(first==35)
		{firstindex='0';}

		return firstindex;	
	}
        
///////////////////////////////////////////////////////////////////////////////
/// FOR SPLIT WORD 	
	public static boolean FilterList(String word)
	{
		if(word.equals("the") || word.equals("in") || word.equals("for") || word.equals("is") || word.equals("are") || word.equals("a") || word.equals("an") || word.equals("to"))
		{
			return false;
		}
		else
		{
			return true;
		}		
	}

////////////////////////////////////////////////////////////////////////////////
//// FOR TAKE DIFFERENT FILE	
	public static void listFilesForFolder(final File folder) 
        {
            String pathParse="";
            String str="";
            
		for (final File fileEntry : folder.listFiles())
		{
			if (fileEntry.isDirectory()) 
			{
				listFilesForFolder(fileEntry);
			} 
			else 
			{
				try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/Database.txt", true)))) 
				{
                                    FilesCount++;
                                    
                                    out.print(fileEntry.getName()+" >"+fileEntry.getAbsolutePath()+"\n");
                                    pathParse=fileEntry.getAbsolutePath();
                                    
                                    char []array = pathParse.toCharArray();
                                    
                                    str="";
                                    
                                    for(int i=0;i<array.length;i++)
                                    {
                                        if((int)array[i]==92)
                                        {
                                            out.print("<"+str+" >"+pathParse+"\n");
                                            str="";
                                            i++;
                                        }
                                        
                                        if(array[i]!=':')
                                        {
                                           str = str + array[i];  
                                        }
                                        
                                    }
		
                                    
				}
				catch (Exception e)
				{
			
				}
			}
		}	
	}

	public static void File(String Path)throws Exception
	{
		FileWriter fw = new FileWriter("Delta_Database/Database.txt"); 
		String name = Path;
		char []array = name.toCharArray();
		String str ="";
		for(int i=0;i<array.length;i++)
		{
			if((int)array[i]==92)
			{
				array[i]='/';
			}
			str = str + array[i];
		}
		
                FilesCount = 0;
                
		final File folder = new File(str);	
		listFilesForFolder(folder);
		
	}
	
	public static String TakePath(char[] chArray)
	{
		int j;String path="";
		for(j=0;j<chArray.length;j++)
		{
			if((int)chArray[j]==62)
			{break;}
		}
		
		j++;
		for(int k=j;k<chArray.length;k++)
		{
			path = path + chArray[k];
		}
		return path;	
	}
        
        
        public static void Indexing()
        {
            try
            {
                Scanner line;
                String line1;
                File[] f1 = new File[4];
                File[] fd = new File[4];
                int countF = (FilesCount/4);
                int cnt = 0;
                int j=0;
                
                File db = new File("Delta_Database");
                
                DeleteF(db);
                
                db.mkdirs();

                f1[0]=new File("Delta_Database/Data0");
                f1[1]=new File("Delta_Database/Data1");
                f1[2]=new File("Delta_Database/Data2");
                f1[3]=new File("Delta_Database/Data3");
                
                fd[0]=new File("Delta_Database/DData0");
                fd[1]=new File("Delta_Database/DData1");
                fd[2]=new File("Delta_Database/DData2");
                fd[3]=new File("Delta_Database/DData3");

                File f2 = new File("Delta_Database/Spell_Correction");

                if(!f2.exists())
                {
                    f2.mkdirs();
                }

                for(int i=0;i<4;i++)
                {
                    if(!f1[i].exists())
                    {
                        f1[i].mkdirs();
                    }
                    
                    if(!fd[i].exists())
                    {
                        fd[i].mkdirs();
                    }
                }

                //System.out.print("\nCountF:"+countF);

                File f = new File("Delta_Database/Database.txt");			

                if(f.exists())
                {
                    FileReader File = new FileReader(f);
                    line = new Scanner(File);

                    while(line.hasNextLine())
                    {
                        if(cnt==countF)
                        {
                                cnt=0;
                                if(j<3)
                                {
                                    j++;
                                }
                        }
                        
                        //System.out.print("\nCnt:"+cnt);
                        //System.out.print("\nj:"+j);

                        cnt++;

                        line1 = line.nextLine();

                        char[] chArray = line1.toCharArray();

                        String newstring = "";

                        int count=0;
                        
                        //System.out.print("\nNewL:"+line1);

                        if((int)chArray[0]==60)
                        {
                            for(int i=1;i<chArray.length;i++)
                            {
                                if((int)chArray[i]==62)
                                {
                                    break;
                                }

                                if(Character.isLetter(chArray[i]) || Character.isDigit(chArray[i]))
                                {
                                    newstring = newstring + chArray[i];
                                }
                                else
                                {
                                    newstring = Lowercase(newstring);

                                    char[] checker = newstring.toCharArray();

                                    if(count==0 || FilterList(newstring))
                                    {
                                        //System.out.print("\nDirNew:"+newstring);
                                        //System.out.print("\nDirFD:"+fd[j]);
                                        try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fd[j]+"/"+newstring+".txt", true)))) 
                                        {
                                            out.print(TakePath(chArray)+"\n");
                                        }
                                        catch (Exception e)
                                        {
                                            System.out.print("\nSorry, there is an Error in indexing...:"+e);
                                        }

                                        if(checker.length>1)
                                        {
                                            File f6= new File("Delta_Database/Spell_Correction/"+checker[0]+checker[1]+"/"+checker[checker.length-1]);

                                            if(!f6.exists())
                                            {
                                                f6.mkdirs();
                                            }

                                            File f5= new File("Delta_Database/Spell_Correction/"+checker[0]+checker[1]+"/"+checker[checker.length-1]+"/"+newstring+".txt");

                                            if(!f5.exists())
                                            {
                                                f5.createNewFile();
                                            }
                                        }

                                        count++;	
                                    }

                                    try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fd[j]+"/"+chArray[i]+".txt", true)))) 
                                    {
                                        out.print(TakePath(chArray)+"\n");
                                    }
                                    catch (Exception e)
                                    {
                                        System.out.print("\nSorry, there is an Error in indexing...");
                                    }								

                                    newstring="";	
                                }							
                            }
                            
                        }
                        else
                        {
                            for(int i=0;i<chArray.length;i++)
                            {
                                if((int)chArray[i]==62)
                                {
                                    break;
                                }

                                if(Character.isLetter(chArray[i]) || Character.isDigit(chArray[i]))
                                {
                                    newstring = newstring + chArray[i];
                                }
                                else
                                {
                                    newstring = Lowercase(newstring);

                                    char[] checker = newstring.toCharArray();

                                    if(count==0 || FilterList(newstring))
                                    {
                                        //System.out.print("\nFilNew:"+newstring);
                                        //System.out.print("\nDirFD:"+f1[j]);
                                        try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f1[j]+"/"+newstring+".txt", true)))) 
                                        {
                                            out.print(TakePath(chArray)+"\n");
                                        }
                                        catch (Exception e)
                                        {
                                            System.out.print("\nSorry, there is an Error in indexing...");
                                        }

                                        if(checker.length>1)
                                        {
                                            File f6= new File("Delta_Database/Spell_Correction/"+checker[0]+checker[1]+"/"+checker[checker.length-1]);

                                            if(!f6.exists())
                                            {
                                                f6.mkdirs();
                                            }

                                            File f5= new File("Delta_Database/Spell_Correction/"+checker[0]+checker[1]+"/"+checker[checker.length-1]+"/"+newstring+".txt");

                                            if(!f5.exists())
                                            {
                                                f5.createNewFile();
                                            }
                                        }

                                        count++;	
                                    }

                                    try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f1[j]+"/"+chArray[i]+".txt", true)))) 
                                    {
                                        out.print(TakePath(chArray)+"\n");
                                    }
                                    catch (Exception e)
                                    {
                                        System.out.print("\nSorry, there is an Error in indexing...");
                                    }								

                                    newstring="";	
                                }							
                            }
                        }
                    }
                }
                else
                {
                    System.out.println("\nFile is not exist.\n");
                }				
            }
            catch(Exception e)
            {
                System.out.println("\nERROR IN 1090 :- "+e);
            }			
            
        }
	
	public static String Lowercase(String st)
        {
            String str = st;
            String sentence = "";
            for(int i=0;i<str.length();i++)
            {
                if(Character.isUpperCase(str.charAt(i))==true)
                {
                    char ch2= (char)(str.charAt(i)+32);
                    sentence = sentence + ch2;
                }
                else
                {
                        sentence= sentence + str.charAt(i);
                }
            }
                    return sentence;	
	}
        
        public static void WriteHistoryData(String s) throws IOException
        {
            try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/History.txt",true)))) 
            {
                out.print("\n"+s+"\n");
            }
            catch (Exception e)
            {
                System.out.print("\nERROR IN 1044:"+ e);
            }
        }
        
	public static Priorityqueue ReadRecommedationFile(int index)
	{
		Priorityqueue q1=null;
		try
		{
			File f=new File("Delta_Database/File/"+index+".dat");
			if(!f.exists())
			{
				return null;
			}
			
			FileInputStream fin = new FileInputStream("Delta_Database/File/"+index+".dat");
			ObjectInputStream oin = new ObjectInputStream(fin);
			
			q1=(Priorityqueue)oin.readObject();
                  	                        
			oin.close();
			fin.close();
		}
		catch(Exception e)
		{
			System.out.println("ERROR IN 1198 :- "+e);			
		}
		return q1;
	}
	
	public static void WriteRecommedationFile(int index,Priorityqueue q)throws Exception
	{		
		try
		{
			FileOutputStream fout = new FileOutputStream("Delta_Database/File/"+index+".dat");
			ObjectOutputStream oout = new ObjectOutputStream(fout);
			
			oout.writeObject(q);
			oout.flush();
			oout.close();
			fout.close();
		}
		catch(Exception e)
		{
			System.out.println("ERROR IN 1217:- "+e);
		}			
	}
	        
        
	public static void Spell_Correction(String word,String fil,int cntr)
	{
		System.out.println("\nSpell correction\n");
		char first,second,last;
		int sum1=0;
                
                File spell = new File("Delta_Database/Spell");
                
                if(!spell.exists())
                {
                    spell.mkdirs();
                }
		
		String word1 = Lowercase(word);
		char [] wordarray = word1.toCharArray();
		
		first = wordarray[0];
		second = wordarray[1];
		last =word.charAt(word1.length() - 1);
		
		for(int i=0;i<(word.length());i++)
		{
			 sum1 = sum1+(int)wordarray[i];
		}
                
		//Right now not Creating a new Data base this is for first time spell checking 
		//String foldar1 = new StringBuilder().append(first).append(second).toString();
		try
		{
			File f1 = new File("Delta_Database/Spell_Correction/"+first+second+"/"+last);
			

			if(f1.exists())
                        {
                            File [] f = f1.listFiles();
                            
                            MinPriority_Queue m = new MinPriority_Queue(f.length);
                            MaxPriority_Queue M = new MaxPriority_Queue(f.length);


                            if (f1.exists() && f1.isDirectory()) 
                            {	
                               int counter3=0;
                               int counter4=0;

                               for(final File fileEntry : f1.listFiles())
                               {
                                      int sum=0;
                                      String filename = fileEntry.getName();
                                      String filename1 = filename.substring(0, filename.lastIndexOf('.'));

                                      char [] ascciiarray = filename1.toCharArray();


                                      for(int i=0;i<(filename1.length());i++)
                                      {
                                              sum = sum+(int)ascciiarray[i];
                                      }


                                      if(((sum1-sum)<148 &&(sum1-sum)>=0) || ((sum1-sum)>(-148)&&(sum1-sum)<=0))   
                                      {
                                              if(sum1-sum>0)
                                              {
                                                      m.Enqueue(filename1, sum1-sum);
                                                      counter3++;
                                              }
                                              else
                                              {
                                                      M.Enqueue(filename1,sum1-sum);
                                                      counter4++;
                                              }
                                      }
                               }

                               if(counter3>2)
                               {
                                       counter3=2;
                               } 
                               if(counter4>2)
                               {
                                       counter4=2;
                               } 


                               File del = new File("Delta_Database/Spell");
                               
                               if(!del.exists())
                               {
                                   del.mkdir();
                               }

                               try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/Spell/"+fil+".txt", true)))) 
                               {
                                    out.print("\nYour query was not found, we recommend to try following:-\n\n");
                               }
                               catch (IOException e)
                               {
                                    System.out.print("\nThere is Some Error at 1348:-"+e);
                               } 

                               while(counter3!=0)
                               {
                                        Object_Store look = m.Dequeue();counter3--;


                                            try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/Spell/"+fil+".txt", true)))) 
                                            {
                                                    out.print(look.GetFileNameString()+"\n");
                                            }
                                            catch (IOException e)
                                            {
                                                    System.out.print("\nThere is Some Error at 1362:-"+e);
                                            }
                               }

                               while(counter4!=0)
                               {
                                    Object_Store look = M.Dequeue();counter4--;

                                        try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/Spell/"+fil+".txt", true)))) 
                                        {
                                                out.print(look.GetFileNameString()+"\n");
                                        }
                                        catch (IOException e)
                                        {
                                                System.out.print("\nThere is Some Error at 1376:-"+e);
                                        }
                               }

                            }
                        }
                        else if(cntr==0)
                        {
                            try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("Delta_Database/Spell/"+fil+".txt", true)))) 
                            {
                                 out.print("\nYour query was not found\n");
                            }
                            catch (IOException e)
                            {
                                 System.out.print("\nThere is Some Error at 1390:-"+e);
                            } 
                        }
			
		}
		catch(Exception e)
		{
			System.out.println("ERROR IN 1397 :- "+e);
		}
				   
	}
	
	public static void Add_String_In_Priority(String str)throws Exception
        {
		char[] ch=str.toCharArray();
		Priorityqueue queuearray = new Priorityqueue(5,1);

		File f=new File("Delta_Database/File");
		if(!f.exists())
		{
			f.mkdirs();
			queuearray.Enqueue(str);
			WriteRecommedationFile(GetIndexOFFirstChar(ch[0]),queuearray);
		}
		else 
		{
			File f1=new File("Delta_Database/File/"+GetIndexOFFirstChar(ch[0])+".dat");
			if(f1.exists())
			{
                            queuearray=ReadRecommedationFile(GetIndexOFFirstChar(ch[0]));
				
			}				
			queuearray.Enqueue(str);
			WriteRecommedationFile(GetIndexOFFirstChar(ch[0]),queuearray);
		}
	}

	public static void main(String[] args) throws Exception
	{
		File f1 = new File("Delta_Database");
                
		if(!f1.exists())
		{
			f1.mkdir();
		}
                
                picNo=ThreadLocalRandom.current().nextInt(0, 14);
                
                setColor();
	
		java.awt.EventQueue.invokeLater(new Runnable() 
		{
			public void run() 
			{
				new Delta().setVisible(true);
			}
		});        
    }
    
}

